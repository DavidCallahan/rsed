%{
#include <string>
#include <fstream>
#include "AST.h"
#include "grammar.tab.hpp"
#include "Scanner.h" 

int Scanner::init(const char * source) {
    auto in = new std::ifstream;
    in->open(source);
    yyin = in ; 
    return in->is_open();
}

static std::string * makeString(const char * text) {
    return new std::string(text);
}

// invoked in grammar.tab.cpp
int yylex(Scanner *scanner) { return scanner->yylex(); }

#define register 

%}

%option yylineno
%option noyywrap

DIGIT    [0-9]
ID       [a-zA-Z][a-zA-Z0-9_]*

%%

all	    return ALL;
columns	    return COLUMNS;
copy        return COPY;
else	    return ELSE;
end         return END;
error	    return ERROR;
for	    return FOR;
foreach     return FOREACH;
if	    return IF;
in	    return IN;
input	    return INPUT;
not	    return NOT;
output	    return OUTPUT;
past	    return PAST;
print	    return PRINT;
replace     return REPLACE;
skip        return SKIP;
style	    return STYLE;
then	    return THEN;
to	    return TO;
with	    return WITH;

{ID}	    yylval.name = new std::string(yytext);   return IDENTIFIER;
\${ID}	    yylval.name = new std::string(yytext+1); return VARIABLE;
\${DIGIT}+  yylval.name = new std::string(yytext+1); return VARIABLE;
{DIGIT}+    yylval.integer = atoi(yytext) ; return NUMBER;

=~	    return MATCH;
=	    return '=';
\(	    return '(';
\)	    return ')';
,	    return ',';
;	    return NEWLINE;
	    	   
#.*         /* comment */
[ \t]+          /* eat up whitespace */

\n([ \t]*(#.*)?\n)* return NEWLINE;

\"([^"]|\\\")*\"[rig]*  yylval.name = makeString(yytext); return STRING;
\'([^']|\\\')*\'[rig]*  yylval.name = makeString(yytext); return STRING;


.           printf( "Unrecognized character: %s\n", yytext );

%%
