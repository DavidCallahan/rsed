%{
#include <string>
#include <iostream> 
#include "AST.h"
#include "Scanner.h"
#include "RegEx.h"
#include "BuiltinCalls.h"

int yylex(Scanner *);
void yyerror(Statement ** result, Scanner * scanner, const char * msg) {
  *result = nullptr;
  scanner->error() << msg << '\n';
}

void set_style(std::string *name,Scanner *scanner) {
   int err = RegEx::regEx->setStyle(*name);
   if(err) {
      scanner->error()  << "invalid regular expression style: "
      			 << *name << '\n'; 
   }
   delete name;
}

Expression * call(std::string * name, Arg * args, Scanner * scanner) {

    unsigned id = 0;
    bool ok = BuiltinCalls::getCallId(*name, &id);
    if (!ok) {
       scanner->error() << "invalid function name: " << *name << '\n';
    }
    auto c = new Call(*name, args, id, scanner->lineno());
    delete name;
    return c;
}
  
#define LINE scanner->lineno()
#define BINARY(OP,x,y) new Binary(Binary::OP,x,y, LINE)
#define UNARY(OP,y) new Binary(Binary::OP, nullptr, y, LINE)

%}


%error-verbose

%union ParseResult {
  Statement * stmt;
  Expression * expr;
  Arg * arg;
  int token;
  std::string * name;
  int integer;
  bool boole;
  StmtList list;
}

%token <name>  STRING VARIABLE IDENTIFIER
%token <token> FOREACH COPY SKIP TO PAST END NEWLINE REPLACE_TOK FOR SPLIT
%token <token> THEN ELSE IF NOT_TOK PRINT MATCH_TOK STYLE MATCH_KW
%token <token> COLUMNS IN LOOKUP_START REQUIRED
%token <integer> NUMBER INPUT OUTPUT CLOSE ERROR ALL WITH DYN_VARIABLE
%type <token> EQ_TOK NE_TOK OR_TOK AND_TOK LE_TOK GE_TOK
%type <integer> lineno
%type <stmt> stmtlist stmt foreach copy skip replace 
%type <stmt> split print columns required
%type <stmt> ifstmt elsestmt set input output close errorStmt 
%type <list> stmtlistlist
%type <boole> optAll optRequired
%type <expr> control toPast  
%type <expr> optControl optExpr optIn
%type <expr>  buffer optBuffer pattern
%type <arg> optarglist arglist 
%type <expr> name expr term primitive variable call lookup replaceExpr stringTerm
%start script

%parse-param {Statement ** parseTree}
%parse-param {Scanner * scanner}
%lex-param {Scanner * scanner}

%nonassoc '='
%left REPLACE_TOK MATCH_KW WITH
%nonassoc IN
%left OR_TOK
%left AND_TOK
%left NOT_TOK
%nonassoc '<' LE_TOK EQ_TOK NE_TOK GE_TOK '>'
%nonassoc MATCH_TOK 
%left '+' '-'
%left '*' '/'
%left UMINUS
%left CONCAT_TOK
%%

script: optNewline optStyle stmtlist { *parseTree = $3 } ;

// todo -- allow empty lines in more places
optNewline: /* empty*/ | NEWLINE ;
optStyle: /* empty */ | STYLE IDENTIFIER NEWLINE { set_style($2, scanner); } ;

stmtlist: stmtlistlist { $$ = $1.getHead(); }
stmtlistlist: { $$ = StmtList::emptyList(); }  
            | stmtlistlist stmt optNewline { $$ = $1.append($2); }
	    | stmtlistlist  error NEWLINE optNewline { $$ = $1; }
            ;

stmt: foreach | copy | skip | replace | ifstmt | split
    | set | print | input | output | close | errorStmt | columns | required
    ;
lineno:     /*empty*/  { $$ = LINE; };

foreach : FOREACH lineno optControl NEWLINE stmtlist END NEWLINE
                { $$ = new Foreach($3, $5, $2) ; }
optControl: /*empty*/  { $$ = nullptr; } | control ;

set: name '=' expr NEWLINE { $$ = new Set($1,$3,LINE); };
name: variable 
    | lookup
    | IDENTIFIER { $$ = AST::variable($1); }
    ; 

copy: COPY lineno control NEWLINE { $$ = AST::copy($3,$2); } ;

skip: SKIP lineno control NEWLINE { $$ = AST::skip($3,$2); }
    | SKIP lineno IF pattern NEWLINE  { $$ = AST::skipOne($4, $2); }    // to end of foreach
    | SKIP NEWLINE { $$ = new Skip(LINE); } ;  // skip 1

control: FOR NUMBER toPast  { $$ = AST::limit($2,$3); }
       | toPast  
       | FOR NUMBER	{ $$ = AST::limit($2, LINE); }
       | ALL { $$ = nullptr; }
       ;

toPast: TO optRequired pattern  { $$ = new Control(AST::StopAt, $3, $2,  LINE); }
      | PAST optRequired pattern { $$ = new Control(AST::StopAfter, $3,  $2, LINE); }
      ;
optRequired: /* empty */  { $$ = false; } 
           | REQUIRED  { $$ = true; }
	   ;

replace: REPLACE_TOK optAll expr WITH expr control NEWLINE { $$ = AST::replace($6,$3,$5,$2,LINE); }
       | REPLACE_TOK optAll expr WITH expr NEWLINE { $$ = AST::replaceOne($3,$5,$2,LINE); }
       ;
optAll: /* empty */ { $$ = false; } 
      | ALL { $$ = true; }
      ;


split: SPLIT optExpr WITH expr NEWLINE { $$ = new Split(new RegExPattern($4), $2, LINE); } ;
columns: SPLIT optExpr COLUMNS expr NEWLINE { $$ = new Columns($4, $2, LINE); }
optExpr: /* empty */ { $$ = AST::current(); }
	  | expr     
          ;

// for use insode of foreach loops
ifstmt: IF lineno pattern optThen NEWLINE stmtlist elsestmt END NEWLINE 
	{ $$ = new IfStatement($3, $6, $7, $2);}
      ;
optThen: /* empty */ | THEN  ;

elsestmt: /* empty */ { $$ = nullptr ; }
	| ELSE IF lineno pattern optThen NEWLINE stmtlist elsestmt 
	  { $$ = new IfStatement($4, $7, $8, $3); }
	| ELSE NEWLINE stmtlist
	  { $$ = $3; } ;

print: PRINT lineno expr optBuffer NEWLINE { $$ = new Print($3,$4, $2); };
errorStmt: ERROR lineno expr NEWLINE { $$ = new Error($3,$2); };
optBuffer: /* empty */ { $$ = nullptr; }
         | TO buffer { $$ = $2; }
         ;

required: REQUIRED lineno pattern NEWLINE { $$ = new Required(0, $3,$2); }

pattern: expr { $$ = AST::checkPattern($1); }
expr: term ;

term:  stringTerm
    |  MATCH_KW expr  { $$ = AST::match(AST::current(), $2, LINE); }
    |  replaceExpr
    |  term OR_TOK term  { $$ = BINARY(OR, $1,$3); }
    |  term AND_TOK term { $$ = BINARY(AND, $1,$3); }
    |  NOT_TOK term { $$ = UNARY(NOT, $2); }
    |  term NE_TOK term { $$ = BINARY(NE, $1, $3); } 
    |  term EQ_TOK term { $$ = BINARY(EQ, $1,$3);} 
    |  term LE_TOK term { $$ = BINARY(LE, $1,$3);} 
    |  term GE_TOK term { $$ = BINARY(GE, $1,$3);} 
    |  term '<' term { $$ = BINARY(LT, $1,$3);} 
    |  term '>' term { $$ = BINARY(GT, $1,$3);} 
    |  term MATCH_TOK term { $$ = AST::match($1,$3,LINE); }
    |  term '+' term { $$ = BINARY(ADD, $1,$3);} 
    |  term '-' term { $$ = BINARY(SUB, $1,$3);} 
    |  term '*' term { $$ = BINARY(MUL, $1,$3);} 
    |  term '/' term { $$ = BINARY(DIV, $1,$3);} 
    |  '-' term %prec UMINUS { $$ = UNARY(NEG,$2); }
    ;

// some code assumes this AST is right-leaning (right-associative)
stringTerm: primitive
          | stringTerm primitive { $$ = BINARY(CONCAT,$1,$2); }
	  ;
primitive: lookup
	 | STRING   { $$ = AST::stringConst($1); }
	 | variable
	 | DYN_VARIABLE { $$ = new VarMatch($1); }
         | call
	 | NUMBER { $$ = AST::integer($1); }	  
         | '(' expr ')' { $$ = $2; }
         | '(' error ')' { $$ = nullptr; }
         ;

variable: VARIABLE { $$ = AST::variable($1); };
lookup:  LOOKUP_START expr ')' { $$ = UNARY(LOOKUP, $2); }; 
call: IDENTIFIER '(' optarglist ')' { $$ = call($1, $3, scanner); }  ;
optarglist: /*empty*/ { $$ = nullptr; }
          | arglist 
	  ;
arglist: expr { $$ = new Arg($1, nullptr ,LINE); }
       | expr ',' arglist { $$ = new Arg($1, $3, LINE); }
       ;

replaceExpr: REPLACE_TOK optAll expr WITH expr optIn  %prec REPLACE_TOK
       { 
         auto p = ($2? UNARY(SET_GLOBAL,$3) : $3);
         auto m = AST::match($6, p, LINE);
         $$ = new Binary(Binary::REPLACE, m, $5, LINE);
       } 
       ;
optIn: /*empty*/  { $$ = AST::current(); }
     | IN expr    { $$ = $2; }
     ;

input: INPUT lineno buffer NEWLINE { $$ = new Input($3,$2); }
output: OUTPUT lineno buffer NEWLINE { $$ = new Output($3,$2); }
close: CLOSE lineno buffer NEWLINE { $$ = new Close($3,$2); }
buffer: expr;
